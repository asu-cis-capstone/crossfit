{"Name":"Facebook Android SDK","Id":1436,"Alias":"facebookandroid","Description":"# Facebook SDK for Android\n\nIntegrate with Facebook to help you build engaging social apps and get more installs.  The Facebook Android SDK includes many features to allow you to integrate social within your own apps:\n\n - **Login** Let people easily sign in to your app with their Facebook identity. If they have already signed in on the Facebook for Android app, they don\u0027t have to reenter their username and password.\n - **Share** Allow people using your app to publish from your app to Facebook. When people of Facebook engage with these posts they are directed to your app.\n - **Custom Stories** Open Graph lets apps tell stories on Facebook through a structured, strongly typed API. This document shows you how to use the Object API to share stories from your app.\n - **Link To Your App** Link posts, stories and requests shared from your app back to your app. Handle these incoming links to direct people to relevant parts within your app.\n - **App Events** App Events allow you to understand the actions taken by users within your app and to measure the effectiveness of your Mobile App Ads.\n - **Ads** Reach the right people where they are most engaged, in News Feed. Drive installs with Mobile App Install Ads. Increase user engagement with Mobile App Engagement Ads.\n - **Graph API** The Graph API allows you to get data in and out of Facebook\u0027s social graph. You can query data, post new stories, upload photos, and more.\n - **Send Requests** Allow users to send requests to their friends from your app.\n - **App Center** For the over one billion people that use Facebook, the App Center is the central place to find great social apps.\n \n##Learn More\nTo find out more and see the official full documentation, please visit: https://developers.facebook.com/docs/android","Version":"3.22.0.0","Summary":"Integrate with Facebook to help you build engaging social apps and get more installs.","QuickStart":"# Getting Started\n\n\n\n### Install the Facebook application\n\nTo take advantage of the native Facebook dialogs, the Facebook application must be installed on the device.  If the Facebook application is not installed on the device, fallbacks to Web based dialogs can instead be used.  If you are testing on an emulator which does not have the ability to install Facebook from the Play store, you can install `FBAndroid.apk` which is included in the SDK which can be downloaded from: https://developers.facebook.com/docs/android/downloads\n\n### Facebook Developers site - Create an app\nIn order to integrate with Facebook\u0027s login, you must have a Facebook app setup on your Facebook Developer site.  More information on how to create an app can be found at\nhttps://developers.facebook.com/docs/android/getting-started/#create-app\n\n**Creating your Key Hashes**\n\nAs part of creating your app, you will need to provide a hash of your app\u0027s keystore\u0027s key.  Keep in mind that you will be signing your app with a different keystore when you are publishing to the Play Store.  You must add the key hashes of any keystores you use to build/test/publish your app to your Facebook app.\n\nThe default keystore that Xamarin.Android uses (which has an alias of *androiddebugkey*) can be found at:\n\n```\nWindows:\nC:\\Users\\[USERNAME]\\AppData\\Local\\Xamarin\\Mono for Android\\debug.keystore\n\nMac OSX:\n/Users/[USERNAME]/.local/share/Xamarin/Mono for Android/debug.keystore\n```\n\nTo generate a Key Hash, we need to execute the following commands (if you\u0027re not using the default Xamarin.Android debug.keystore, make sure you specify the correct alias for the keystore you created):\n\n```\nWindows:\nkeytool -exportcert -alias androiddebugkey -keystore debug.keystore | openssl sha1 -binary | openssl base64\n\nMac OSX:\nkeytool -exportcert -alias androiddebugkey -keystore debug.keystore | openssl sha1 -binary | openssl base64\n```\nThe output from the command above is the hash you need to add to your Facebook app.\n\n\n\n\n\n### Adding MetaData and Permissions\nTo integrate with Facebook SDK, your app must declare the ***App ID*** of the app you created on the Facebook Developer site (this should be on your App\u0027s dashboard).  This App ID must be specified in your `AndroidManifest.xml` file.  The easiest way to do this is with an attribute:\n\n```\n// NOTE: Facebook SDK rquires that the \u0027Value\u0027 point to a string resource\n//       in your values/ folder (eg: strings.xml file).\n//       It will not allow you to use the app_id value directly here!\n[assembly:MetaData (\"com.facebook.sdk.ApplicationId\", Value =\"@string/app_id\")]\n```\n\nYour app_id should be defined in your /Resources/values/strings.xml file like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cresources\u003e\n\t\u003cstring name=\"app_id\"\u003eYOUR-APP-ID\u003c/string\u003e\n\u003c/resources\u003e\n```\n\nYou must also declare permissions for *INTERNET* and *WRITE_EXTERNAL_STORAGE* which can be done with these attributes:\n\n```\n[assembly:Permission (Name = Android.Manifest.Permission.Internet)]\n[assembly:Permission (Name = Android.Manifest.Permission.WriteExternalStorage)]\n```\n\n### Add Facebook Login Activity to your Manifest\nIf you plan on using Facebook\u0027s login (if you are unsure, you should add this), you should declare the activity within your own Application\u0027s `AndroidManifest.xml`, inside of the `\u003capplication\u003e\u003c/application\u003e` tag:\n\n```\n\u003cactivity android:name=\"com.facebook.LoginActivity\"\n                  android:theme=\"@android:style/Theme.Translucent.NoTitleBar\"\n                  android:label=\"@string/app_name\" /\u003e\n```\n\n\n### Facebook Login in your App\nTo have your app log a user into Facebook, you will want to create and open a new `Session`.  The Facebook SDK by default will manage caching your access token and login state for you, all you need to do is ensure you ask to open the session at some point in your app before trying to use the `Session.ActiveSession`.  The sample below shows how to open a session, listen for the status result of that request, and then make a request to the Graph API to get the name of the currently logged in user.  Note that you must pass the `OnActivityResult` calls over to the `ActiveSession` so Facebook can join in the lifecycle of activity results.  Once you have an open and active session, you can access the `Session.ActiveSession.AccessToken` for use in your Graph API library of choice (it does not have to be the one in this SDK).\n\n```\n[Activity (Label = \"Facebook Sample\", MainLauncher = true)]\npublic class MainActivity : Activity, Session.IStatusCallback, Request.IGraphUserCallback\n{\n\tprotected override void OnCreate (Bundle bundle)\n\t{\n\t\tbase.OnCreate (bundle);\n\t\tSetContentView (Resource.Layout.Main);\n\n\t\t// Open a FB Session and show login if necessary\n\t\tSession.OpenActiveSession (this, true, this);\n\t}\n\n\tprotected override void OnActivityResult (int requestCode, Result resultCode, Intent data)\n\t{\n\t\tbase.OnActivityResult (requestCode, resultCode, data);\n\n\t\t// Relay the result to our FB Session\n\t\tSession.ActiveSession.OnActivityResult (this, requestCode, (int)resultCode, data);\n\t}\n\n\tpublic void Call (Session session, SessionState state, Java.Lang.Exception exception)\n\t{\n\t\t// Make a request for \u0027Me\u0027 information about the current user\n\t\tif (session.IsOpened)\n\t\t\tRequest.ExecuteMeRequestAsync (session, this);\n\t}\n\n\tpublic void OnCompleted (Xamarin.Facebook.Model.IGraphUser user, Response response)\n\t{\n\t\t// \u0027Me\u0027 request callback\n\t\tif (user != null)\n\t\t\tConsole.WriteLine (\"GOT USER: \" + user.Name);\n\t\telse\n\t\t\tConsole.WriteLine (\"Failed to get \u0027me\u0027!\");\n\t}\n}\n```\t\n \n## Learn More\nYou can learn more by visiting the official Facebook Android SDK Documentation site here: https://developers.facebook.com/docs/android/           ","Hash":"68e324ee0b1b3e3927ba6a8545836a90","TargetPlatforms":["android"],"TrialHash":null}